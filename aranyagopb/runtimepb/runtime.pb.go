// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: runtime/runtime.proto

package runtimepb

import (
	bytes "bytes"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PacketType int32

const (
	_INVALID_RUNTIME_DATA PacketType = 0
	// 1-9: runtime basic operation
	CMD_GET_INFO     PacketType = 1
	CMD_EXEC         PacketType = 2
	CMD_ATTACH       PacketType = 3
	CMD_LOGS         PacketType = 4
	CMD_TTY_RESIZE   PacketType = 5
	CMD_PORT_FORWARD PacketType = 6
	// 11-19: container image / application bundle operations
	CMD_IMAGE_LIST   PacketType = 11
	CMD_IMAGE_ENSURE PacketType = 12
	CMD_IMAGE_DELETE PacketType = 13
	// 21-29: image msgs
	MSG_IMAGE_STATUS      PacketType = 21
	MSG_IMAGE_STATUS_LIST PacketType = 22
	// 31-39: pod provisioning
	CMD_POD_LIST   PacketType = 31
	CMD_POD_ENSURE PacketType = 32
	CMD_POD_DELETE PacketType = 33
	// 41-49: pod msgs
	MSG_POD_STATUS      PacketType = 41
	MSG_POD_STATUS_LIST PacketType = 42
)

var PacketType_name = map[int32]string{
	0:  "_INVALID_RUNTIME_DATA",
	1:  "CMD_GET_INFO",
	2:  "CMD_EXEC",
	3:  "CMD_ATTACH",
	4:  "CMD_LOGS",
	5:  "CMD_TTY_RESIZE",
	6:  "CMD_PORT_FORWARD",
	11: "CMD_IMAGE_LIST",
	12: "CMD_IMAGE_ENSURE",
	13: "CMD_IMAGE_DELETE",
	21: "MSG_IMAGE_STATUS",
	22: "MSG_IMAGE_STATUS_LIST",
	31: "CMD_POD_LIST",
	32: "CMD_POD_ENSURE",
	33: "CMD_POD_DELETE",
	41: "MSG_POD_STATUS",
	42: "MSG_POD_STATUS_LIST",
}

var PacketType_value = map[string]int32{
	"_INVALID_RUNTIME_DATA": 0,
	"CMD_GET_INFO":          1,
	"CMD_EXEC":              2,
	"CMD_ATTACH":            3,
	"CMD_LOGS":              4,
	"CMD_TTY_RESIZE":        5,
	"CMD_PORT_FORWARD":      6,
	"CMD_IMAGE_LIST":        11,
	"CMD_IMAGE_ENSURE":      12,
	"CMD_IMAGE_DELETE":      13,
	"MSG_IMAGE_STATUS":      21,
	"MSG_IMAGE_STATUS_LIST": 22,
	"CMD_POD_LIST":          31,
	"CMD_POD_ENSURE":        32,
	"CMD_POD_DELETE":        33,
	"MSG_POD_STATUS":        41,
	"MSG_POD_STATUS_LIST":   42,
}

func (PacketType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ab2d388759451feb, []int{0}
}

type Packet struct {
	Kind    PacketType `protobuf:"varint,1,opt,name=kind,proto3,enum=runtime.PacketType" json:"kind,omitempty"`
	Payload []byte     `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *Packet) Reset()      { *m = Packet{} }
func (*Packet) ProtoMessage() {}
func (*Packet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ab2d388759451feb, []int{0}
}
func (m *Packet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Packet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Packet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Packet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Packet.Merge(m, src)
}
func (m *Packet) XXX_Size() int {
	return m.Size()
}
func (m *Packet) XXX_DiscardUnknown() {
	xxx_messageInfo_Packet.DiscardUnknown(m)
}

var xxx_messageInfo_Packet proto.InternalMessageInfo

func (m *Packet) GetKind() PacketType {
	if m != nil {
		return m.Kind
	}
	return _INVALID_RUNTIME_DATA
}

func (m *Packet) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func init() {
	proto.RegisterEnum("runtime.PacketType", PacketType_name, PacketType_value)
	proto.RegisterType((*Packet)(nil), "runtime.Packet")
}

func init() { proto.RegisterFile("runtime/runtime.proto", fileDescriptor_ab2d388759451feb) }

var fileDescriptor_ab2d388759451feb = []byte{
	// 403 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x92, 0xcf, 0xae, 0xd2, 0x40,
	0x18, 0xc5, 0x3b, 0x78, 0xe5, 0x9a, 0xb1, 0x92, 0xc9, 0x5c, 0x51, 0xdc, 0x8c, 0xe8, 0xc6, 0x2b,
	0x46, 0x48, 0xf4, 0x09, 0x46, 0x3a, 0xd4, 0xc6, 0xfe, 0x21, 0xd3, 0xc1, 0x3f, 0x6c, 0x26, 0x83,
	0x34, 0x4a, 0x50, 0xda, 0x34, 0xd5, 0x84, 0x9d, 0x8f, 0xe0, 0x63, 0xf8, 0x28, 0x2e, 0x59, 0xb2,
	0x94, 0xb2, 0xd0, 0x25, 0x8f, 0x60, 0x86, 0x76, 0xa2, 0xdc, 0x55, 0x73, 0x7e, 0xdf, 0xe9, 0x39,
	0xf3, 0x25, 0x1f, 0x6c, 0xe7, 0x5f, 0x56, 0xc5, 0xe2, 0x73, 0x32, 0xa8, 0xbf, 0xfd, 0x2c, 0x4f,
	0x8b, 0x14, 0x9f, 0xd7, 0xf2, 0xe1, 0x2b, 0xd8, 0x1c, 0xab, 0xf7, 0xcb, 0xa4, 0xc0, 0x8f, 0xe0,
	0xd9, 0x72, 0xb1, 0x9a, 0x77, 0x40, 0x17, 0x5c, 0xb6, 0x9e, 0x5d, 0xf4, 0xcd, 0x0f, 0xd5, 0x58,
	0xac, 0xb3, 0x84, 0x1f, 0x0d, 0xb8, 0x03, 0xcf, 0x33, 0xb5, 0xfe, 0x94, 0xaa, 0x79, 0xa7, 0xd1,
	0x05, 0x97, 0x36, 0x37, 0xb2, 0xf7, 0xbb, 0x01, 0xe1, 0x3f, 0x3b, 0xbe, 0x07, 0xdb, 0xd2, 0x0b,
	0x5f, 0x53, 0xdf, 0x73, 0x24, 0x9f, 0x84, 0xc2, 0x0b, 0x98, 0x74, 0xa8, 0xa0, 0xc8, 0xc2, 0x08,
	0xda, 0xc3, 0xc0, 0x91, 0x2e, 0x13, 0xd2, 0x0b, 0x47, 0x11, 0x02, 0xd8, 0x86, 0x37, 0x34, 0x61,
	0x6f, 0xd9, 0x10, 0x35, 0x70, 0x0b, 0x42, 0xad, 0xa8, 0x10, 0x74, 0xf8, 0x12, 0x5d, 0x33, 0x53,
	0x3f, 0x72, 0x63, 0x74, 0x86, 0x31, 0x6c, 0x69, 0x25, 0xc4, 0x3b, 0xc9, 0x59, 0xec, 0x4d, 0x19,
	0xba, 0x8e, 0x6f, 0x43, 0xa4, 0xd9, 0x38, 0xe2, 0x42, 0x8e, 0x22, 0xfe, 0x86, 0x72, 0x07, 0x35,
	0x8d, 0xd3, 0x0b, 0xa8, 0xcb, 0xa4, 0xef, 0xc5, 0x02, 0xdd, 0x34, 0xce, 0x8a, 0xb1, 0x30, 0x9e,
	0x70, 0x86, 0xec, 0x53, 0xea, 0x30, 0x9f, 0x09, 0x86, 0x6e, 0x69, 0x1a, 0xc4, 0x6e, 0x4d, 0x63,
	0x41, 0xc5, 0x24, 0x46, 0x6d, 0xbd, 0xd8, 0x55, 0x5a, 0x85, 0xdf, 0x31, 0x8b, 0x8d, 0x23, 0xa7,
	0x22, 0xf7, 0xcd, 0x13, 0x34, 0xa9, 0xcb, 0xba, 0xff, 0xb3, 0xba, 0xea, 0x81, 0x66, 0x3a, 0x54,
	0xb3, 0xba, 0xe8, 0x31, 0xbe, 0x0b, 0x2f, 0x4e, 0x59, 0x15, 0xda, 0x7b, 0xa1, 0x36, 0x3b, 0x62,
	0x6d, 0x77, 0xc4, 0x3a, 0xec, 0x08, 0xf8, 0x56, 0x12, 0xf0, 0xa3, 0x24, 0xe0, 0x67, 0x49, 0xc0,
	0xa6, 0x24, 0xe0, 0x57, 0x49, 0xc0, 0x9f, 0x92, 0x58, 0x87, 0x92, 0x80, 0xef, 0x7b, 0x62, 0x6d,
	0xf6, 0xc4, 0xda, 0xee, 0x89, 0x35, 0x7d, 0xa2, 0xf2, 0x8f, 0xaa, 0xe8, 0xcf, 0x93, 0xaf, 0x03,
	0x95, 0xab, 0xd5, 0x5a, 0x3d, 0x3d, 0x5e, 0x43, 0x2d, 0x3e, 0xa4, 0xd9, 0xcc, 0x9c, 0x49, 0x36,
	0x9b, 0x35, 0x8f, 0xb3, 0xe7, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x14, 0xc9, 0x89, 0x67, 0x42,
	0x02, 0x00, 0x00,
}

func (x PacketType) String() string {
	s, ok := PacketType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Packet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Packet)
	if !ok {
		that2, ok := that.(Packet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Kind != that1.Kind {
		return false
	}
	if !bytes.Equal(this.Payload, that1.Payload) {
		return false
	}
	return true
}
func (this *Packet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&runtimepb.Packet{")
	s = append(s, "Kind: "+fmt.Sprintf("%#v", this.Kind)+",\n")
	s = append(s, "Payload: "+fmt.Sprintf("%#v", this.Payload)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringRuntime(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Packet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Packet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Packet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintRuntime(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x12
	}
	if m.Kind != 0 {
		i = encodeVarintRuntime(dAtA, i, uint64(m.Kind))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintRuntime(dAtA []byte, offset int, v uint64) int {
	offset -= sovRuntime(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Packet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Kind != 0 {
		n += 1 + sovRuntime(uint64(m.Kind))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovRuntime(uint64(l))
	}
	return n
}

func sovRuntime(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRuntime(x uint64) (n int) {
	return sovRuntime(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Packet) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Packet{`,
		`Kind:` + fmt.Sprintf("%v", this.Kind) + `,`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringRuntime(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Packet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRuntime
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Packet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Packet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRuntime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= PacketType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRuntime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRuntime
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRuntime
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRuntime(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRuntime
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRuntime
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRuntime(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRuntime
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRuntime
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRuntime
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRuntime
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRuntime
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRuntime
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRuntime        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRuntime          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRuntime = fmt.Errorf("proto: unexpected end of group")
)
