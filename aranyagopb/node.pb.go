// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: node.proto

// +build !nosysinfo

package aranyagopb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type NodeCondition int32

const (
	NODE_CONDITION_UNKNOWN   NodeCondition = 0
	NODE_CONDITION_HEALTHY   NodeCondition = 1
	NODE_CONDITION_UNHEALTHY NodeCondition = 2
)

var NodeCondition_name = map[int32]string{
	0: "NODE_CONDITION_UNKNOWN",
	1: "NODE_CONDITION_HEALTHY",
	2: "NODE_CONDITION_UNHEALTHY",
}

var NodeCondition_value = map[string]int32{
	"NODE_CONDITION_UNKNOWN":   0,
	"NODE_CONDITION_HEALTHY":   1,
	"NODE_CONDITION_UNHEALTHY": 2,
}

func (NodeCondition) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0c843d59d2d938e7, []int{0}
}

type NodeExtInfo_ValueType int32

const (
	NODE_EXT_INFO_TYPE_STRING  NodeExtInfo_ValueType = 0
	NODE_EXT_INFO_TYPE_INTEGER NodeExtInfo_ValueType = 1
	NODE_EXT_INFO_TYPE_FLOAT   NodeExtInfo_ValueType = 2
)

var NodeExtInfo_ValueType_name = map[int32]string{
	0: "NODE_EXT_INFO_TYPE_STRING",
	1: "NODE_EXT_INFO_TYPE_INTEGER",
	2: "NODE_EXT_INFO_TYPE_FLOAT",
}

var NodeExtInfo_ValueType_value = map[string]int32{
	"NODE_EXT_INFO_TYPE_STRING":  0,
	"NODE_EXT_INFO_TYPE_INTEGER": 1,
	"NODE_EXT_INFO_TYPE_FLOAT":   2,
}

func (NodeExtInfo_ValueType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0c843d59d2d938e7, []int{4, 0}
}

type NodeExtInfo_Operator int32

const (
	// no matter what previous value is, set to new value
	NODE_EXT_INFO_OPERATOR_SET NodeExtInfo_Operator = 0
	// only valid for {integer, float}
	NODE_EXT_INFO_OPERATOR_ADD NodeExtInfo_Operator = 1
	// only valid for {integer, float}
	NODE_EXT_INFO_OPERATOR_MINUS NodeExtInfo_Operator = 2
)

var NodeExtInfo_Operator_name = map[int32]string{
	0: "NODE_EXT_INFO_OPERATOR_SET",
	1: "NODE_EXT_INFO_OPERATOR_ADD",
	2: "NODE_EXT_INFO_OPERATOR_MINUS",
}

var NodeExtInfo_Operator_value = map[string]int32{
	"NODE_EXT_INFO_OPERATOR_SET":   0,
	"NODE_EXT_INFO_OPERATOR_ADD":   1,
	"NODE_EXT_INFO_OPERATOR_MINUS": 2,
}

func (NodeExtInfo_Operator) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0c843d59d2d938e7, []int{4, 1}
}

type NodeExtInfo_Target int32

const (
	NODE_EXT_INFO_TARGET_ANNOTATION NodeExtInfo_Target = 0
	NODE_EXT_INFO_TARGET_LABEL      NodeExtInfo_Target = 1
)

var NodeExtInfo_Target_name = map[int32]string{
	0: "NODE_EXT_INFO_TARGET_ANNOTATION",
	1: "NODE_EXT_INFO_TARGET_LABEL",
}

var NodeExtInfo_Target_value = map[string]int32{
	"NODE_EXT_INFO_TARGET_ANNOTATION": 0,
	"NODE_EXT_INFO_TARGET_LABEL":      1,
}

func (NodeExtInfo_Target) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0c843d59d2d938e7, []int{4, 2}
}

type NodeContainerRuntimeInfo struct {
	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *NodeContainerRuntimeInfo) Reset()      { *m = NodeContainerRuntimeInfo{} }
func (*NodeContainerRuntimeInfo) ProtoMessage() {}
func (*NodeContainerRuntimeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c843d59d2d938e7, []int{0}
}
func (m *NodeContainerRuntimeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeContainerRuntimeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeContainerRuntimeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeContainerRuntimeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeContainerRuntimeInfo.Merge(m, src)
}
func (m *NodeContainerRuntimeInfo) XXX_Size() int {
	return m.Size()
}
func (m *NodeContainerRuntimeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeContainerRuntimeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NodeContainerRuntimeInfo proto.InternalMessageInfo

func (m *NodeContainerRuntimeInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NodeContainerRuntimeInfo) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type NodeSystemInfo struct {
	Os            string                    `protobuf:"bytes,1,opt,name=os,proto3" json:"os,omitempty"`
	OsImage       string                    `protobuf:"bytes,2,opt,name=os_image,json=osImage,proto3" json:"os_image,omitempty"`
	Arch          string                    `protobuf:"bytes,3,opt,name=arch,proto3" json:"arch,omitempty"`
	KernelVersion string                    `protobuf:"bytes,4,opt,name=kernel_version,json=kernelVersion,proto3" json:"kernel_version,omitempty"`
	BootId        string                    `protobuf:"bytes,5,opt,name=boot_id,json=bootId,proto3" json:"boot_id,omitempty"`
	MachineId     string                    `protobuf:"bytes,6,opt,name=machine_id,json=machineId,proto3" json:"machine_id,omitempty"`
	SystemUuid    string                    `protobuf:"bytes,7,opt,name=system_uuid,json=systemUuid,proto3" json:"system_uuid,omitempty"`
	RuntimeInfo   *NodeContainerRuntimeInfo `protobuf:"bytes,11,opt,name=runtime_info,json=runtimeInfo,proto3" json:"runtime_info,omitempty"`
}

func (m *NodeSystemInfo) Reset()      { *m = NodeSystemInfo{} }
func (*NodeSystemInfo) ProtoMessage() {}
func (*NodeSystemInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c843d59d2d938e7, []int{1}
}
func (m *NodeSystemInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeSystemInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeSystemInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeSystemInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeSystemInfo.Merge(m, src)
}
func (m *NodeSystemInfo) XXX_Size() int {
	return m.Size()
}
func (m *NodeSystemInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeSystemInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NodeSystemInfo proto.InternalMessageInfo

func (m *NodeSystemInfo) GetOs() string {
	if m != nil {
		return m.Os
	}
	return ""
}

func (m *NodeSystemInfo) GetOsImage() string {
	if m != nil {
		return m.OsImage
	}
	return ""
}

func (m *NodeSystemInfo) GetArch() string {
	if m != nil {
		return m.Arch
	}
	return ""
}

func (m *NodeSystemInfo) GetKernelVersion() string {
	if m != nil {
		return m.KernelVersion
	}
	return ""
}

func (m *NodeSystemInfo) GetBootId() string {
	if m != nil {
		return m.BootId
	}
	return ""
}

func (m *NodeSystemInfo) GetMachineId() string {
	if m != nil {
		return m.MachineId
	}
	return ""
}

func (m *NodeSystemInfo) GetSystemUuid() string {
	if m != nil {
		return m.SystemUuid
	}
	return ""
}

func (m *NodeSystemInfo) GetRuntimeInfo() *NodeContainerRuntimeInfo {
	if m != nil {
		return m.RuntimeInfo
	}
	return nil
}

type NodeResources struct {
	CpuCount     uint64 `protobuf:"varint,1,opt,name=cpu_count,json=cpuCount,proto3" json:"cpu_count,omitempty"`
	MemoryBytes  uint64 `protobuf:"varint,2,opt,name=memory_bytes,json=memoryBytes,proto3" json:"memory_bytes,omitempty"`
	StorageBytes uint64 `protobuf:"varint,3,opt,name=storage_bytes,json=storageBytes,proto3" json:"storage_bytes,omitempty"`
}

func (m *NodeResources) Reset()      { *m = NodeResources{} }
func (*NodeResources) ProtoMessage() {}
func (*NodeResources) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c843d59d2d938e7, []int{2}
}
func (m *NodeResources) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeResources) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeResources.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeResources) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeResources.Merge(m, src)
}
func (m *NodeResources) XXX_Size() int {
	return m.Size()
}
func (m *NodeResources) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeResources.DiscardUnknown(m)
}

var xxx_messageInfo_NodeResources proto.InternalMessageInfo

func (m *NodeResources) GetCpuCount() uint64 {
	if m != nil {
		return m.CpuCount
	}
	return 0
}

func (m *NodeResources) GetMemoryBytes() uint64 {
	if m != nil {
		return m.MemoryBytes
	}
	return 0
}

func (m *NodeResources) GetStorageBytes() uint64 {
	if m != nil {
		return m.StorageBytes
	}
	return 0
}

type NodeConditions struct {
	Ready   NodeCondition `protobuf:"varint,1,opt,name=ready,proto3,enum=aranya.NodeCondition" json:"ready,omitempty"`
	Memory  NodeCondition `protobuf:"varint,2,opt,name=memory,proto3,enum=aranya.NodeCondition" json:"memory,omitempty"`
	Disk    NodeCondition `protobuf:"varint,3,opt,name=disk,proto3,enum=aranya.NodeCondition" json:"disk,omitempty"`
	Pid     NodeCondition `protobuf:"varint,4,opt,name=pid,proto3,enum=aranya.NodeCondition" json:"pid,omitempty"`
	Network NodeCondition `protobuf:"varint,5,opt,name=network,proto3,enum=aranya.NodeCondition" json:"network,omitempty"`
	Pod     NodeCondition `protobuf:"varint,6,opt,name=pod,proto3,enum=aranya.NodeCondition" json:"pod,omitempty"`
}

func (m *NodeConditions) Reset()      { *m = NodeConditions{} }
func (*NodeConditions) ProtoMessage() {}
func (*NodeConditions) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c843d59d2d938e7, []int{3}
}
func (m *NodeConditions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeConditions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeConditions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeConditions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeConditions.Merge(m, src)
}
func (m *NodeConditions) XXX_Size() int {
	return m.Size()
}
func (m *NodeConditions) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeConditions.DiscardUnknown(m)
}

var xxx_messageInfo_NodeConditions proto.InternalMessageInfo

func (m *NodeConditions) GetReady() NodeCondition {
	if m != nil {
		return m.Ready
	}
	return NODE_CONDITION_UNKNOWN
}

func (m *NodeConditions) GetMemory() NodeCondition {
	if m != nil {
		return m.Memory
	}
	return NODE_CONDITION_UNKNOWN
}

func (m *NodeConditions) GetDisk() NodeCondition {
	if m != nil {
		return m.Disk
	}
	return NODE_CONDITION_UNKNOWN
}

func (m *NodeConditions) GetPid() NodeCondition {
	if m != nil {
		return m.Pid
	}
	return NODE_CONDITION_UNKNOWN
}

func (m *NodeConditions) GetNetwork() NodeCondition {
	if m != nil {
		return m.Network
	}
	return NODE_CONDITION_UNKNOWN
}

func (m *NodeConditions) GetPod() NodeCondition {
	if m != nil {
		return m.Pod
	}
	return NODE_CONDITION_UNKNOWN
}

// set extra node information
type NodeExtInfo struct {
	// value is always transmitted in string format
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// type of the value
	ValueType NodeExtInfo_ValueType `protobuf:"varint,2,opt,name=value_type,json=valueType,proto3,enum=aranya.NodeExtInfo_ValueType" json:"value_type,omitempty"`
	// operator
	Operator  NodeExtInfo_Operator `protobuf:"varint,3,opt,name=operator,proto3,enum=aranya.NodeExtInfo_Operator" json:"operator,omitempty"`
	Target    NodeExtInfo_Target   `protobuf:"varint,4,opt,name=target,proto3,enum=aranya.NodeExtInfo_Target" json:"target,omitempty"`
	TargetKey string               `protobuf:"bytes,5,opt,name=target_key,json=targetKey,proto3" json:"target_key,omitempty"`
}

func (m *NodeExtInfo) Reset()      { *m = NodeExtInfo{} }
func (*NodeExtInfo) ProtoMessage() {}
func (*NodeExtInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c843d59d2d938e7, []int{4}
}
func (m *NodeExtInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeExtInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeExtInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeExtInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeExtInfo.Merge(m, src)
}
func (m *NodeExtInfo) XXX_Size() int {
	return m.Size()
}
func (m *NodeExtInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeExtInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NodeExtInfo proto.InternalMessageInfo

func (m *NodeExtInfo) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *NodeExtInfo) GetValueType() NodeExtInfo_ValueType {
	if m != nil {
		return m.ValueType
	}
	return NODE_EXT_INFO_TYPE_STRING
}

func (m *NodeExtInfo) GetOperator() NodeExtInfo_Operator {
	if m != nil {
		return m.Operator
	}
	return NODE_EXT_INFO_OPERATOR_SET
}

func (m *NodeExtInfo) GetTarget() NodeExtInfo_Target {
	if m != nil {
		return m.Target
	}
	return NODE_EXT_INFO_TARGET_ANNOTATION
}

func (m *NodeExtInfo) GetTargetKey() string {
	if m != nil {
		return m.TargetKey
	}
	return ""
}

type NodeStatusMsg struct {
	SystemInfo *NodeSystemInfo `protobuf:"bytes,1,opt,name=system_info,json=systemInfo,proto3" json:"system_info,omitempty"`
	Capacity   *NodeResources  `protobuf:"bytes,2,opt,name=capacity,proto3" json:"capacity,omitempty"`
	Conditions *NodeConditions `protobuf:"bytes,3,opt,name=conditions,proto3" json:"conditions,omitempty"`
	ExtInfo    []*NodeExtInfo  `protobuf:"bytes,4,rep,name=ext_info,json=extInfo,proto3" json:"ext_info,omitempty"`
}

func (m *NodeStatusMsg) Reset()      { *m = NodeStatusMsg{} }
func (*NodeStatusMsg) ProtoMessage() {}
func (*NodeStatusMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c843d59d2d938e7, []int{5}
}
func (m *NodeStatusMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeStatusMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeStatusMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeStatusMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeStatusMsg.Merge(m, src)
}
func (m *NodeStatusMsg) XXX_Size() int {
	return m.Size()
}
func (m *NodeStatusMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeStatusMsg.DiscardUnknown(m)
}

var xxx_messageInfo_NodeStatusMsg proto.InternalMessageInfo

func (m *NodeStatusMsg) GetSystemInfo() *NodeSystemInfo {
	if m != nil {
		return m.SystemInfo
	}
	return nil
}

func (m *NodeStatusMsg) GetCapacity() *NodeResources {
	if m != nil {
		return m.Capacity
	}
	return nil
}

func (m *NodeStatusMsg) GetConditions() *NodeConditions {
	if m != nil {
		return m.Conditions
	}
	return nil
}

func (m *NodeStatusMsg) GetExtInfo() []*NodeExtInfo {
	if m != nil {
		return m.ExtInfo
	}
	return nil
}

func init() {
	proto.RegisterEnum("aranya.NodeCondition", NodeCondition_name, NodeCondition_value)
	proto.RegisterEnum("aranya.NodeExtInfo_ValueType", NodeExtInfo_ValueType_name, NodeExtInfo_ValueType_value)
	proto.RegisterEnum("aranya.NodeExtInfo_Operator", NodeExtInfo_Operator_name, NodeExtInfo_Operator_value)
	proto.RegisterEnum("aranya.NodeExtInfo_Target", NodeExtInfo_Target_name, NodeExtInfo_Target_value)
	proto.RegisterType((*NodeContainerRuntimeInfo)(nil), "aranya.NodeContainerRuntimeInfo")
	proto.RegisterType((*NodeSystemInfo)(nil), "aranya.NodeSystemInfo")
	proto.RegisterType((*NodeResources)(nil), "aranya.NodeResources")
	proto.RegisterType((*NodeConditions)(nil), "aranya.NodeConditions")
	proto.RegisterType((*NodeExtInfo)(nil), "aranya.NodeExtInfo")
	proto.RegisterType((*NodeStatusMsg)(nil), "aranya.NodeStatusMsg")
}

func init() { proto.RegisterFile("node.proto", fileDescriptor_0c843d59d2d938e7) }

var fileDescriptor_0c843d59d2d938e7 = []byte{
	// 880 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x55, 0x4f, 0x73, 0xdb, 0x44,
	0x14, 0xb7, 0x1c, 0xc7, 0x7f, 0x9e, 0x93, 0x8c, 0x67, 0x81, 0xe2, 0x86, 0x44, 0x75, 0xd5, 0x61,
	0x08, 0x30, 0x75, 0x87, 0x30, 0x03, 0x1c, 0xb8, 0x38, 0x8e, 0x9a, 0x68, 0x9a, 0x48, 0x9d, 0xb5,
	0xd2, 0x52, 0x2e, 0x9a, 0x8d, 0xb4, 0x75, 0x34, 0x89, 0xb5, 0x9a, 0xd5, 0x2a, 0x54, 0x37, 0x3e,
	0x02, 0x07, 0xb8, 0xf0, 0x09, 0xf8, 0x28, 0x1c, 0x73, 0xec, 0x91, 0x38, 0x17, 0x8e, 0xfd, 0x08,
	0x8c, 0x76, 0x25, 0xc7, 0xa4, 0x76, 0x6f, 0xef, 0xcf, 0xef, 0xfd, 0xd9, 0xdf, 0xbe, 0x7d, 0x0b,
	0x10, 0xb1, 0x80, 0xf6, 0x63, 0xce, 0x04, 0x43, 0x75, 0xc2, 0x49, 0x94, 0x11, 0xe3, 0x10, 0xba,
	0x36, 0x0b, 0xe8, 0x90, 0x45, 0x82, 0x84, 0x11, 0xe5, 0x38, 0x8d, 0x44, 0x38, 0xa1, 0x56, 0xf4,
	0x9a, 0x21, 0x04, 0xb5, 0x88, 0x4c, 0x68, 0x57, 0xeb, 0x69, 0x3b, 0x2d, 0x2c, 0x65, 0xd4, 0x85,
	0xc6, 0x25, 0xe5, 0x49, 0xc8, 0xa2, 0x6e, 0x55, 0x9a, 0x4b, 0xd5, 0xf8, 0xbd, 0x0a, 0x1b, 0x79,
	0xaa, 0x51, 0x96, 0x08, 0x3a, 0x91, 0x09, 0x36, 0xa0, 0xca, 0x92, 0x22, 0xbc, 0xca, 0x12, 0x74,
	0x1f, 0x9a, 0x2c, 0xf1, 0xc2, 0x09, 0x19, 0xd3, 0x32, 0x9a, 0x25, 0x56, 0xae, 0xe6, 0xb5, 0x08,
	0xf7, 0xcf, 0xba, 0x2b, 0xaa, 0x56, 0x2e, 0xa3, 0xcf, 0x61, 0xe3, 0x9c, 0xf2, 0x88, 0x5e, 0x78,
	0x65, 0xc9, 0x9a, 0xf4, 0xae, 0x2b, 0xeb, 0x0b, 0x65, 0x44, 0x9f, 0x42, 0xe3, 0x94, 0x31, 0xe1,
	0x85, 0x41, 0x77, 0x55, 0xfa, 0xeb, 0xb9, 0x6a, 0x05, 0x68, 0x1b, 0x60, 0x42, 0xfc, 0xb3, 0x30,
	0xa2, 0xb9, 0xaf, 0x2e, 0x7d, 0xad, 0xc2, 0x62, 0x05, 0xe8, 0x01, 0xb4, 0x13, 0xd9, 0xab, 0x97,
	0xa6, 0x61, 0xd0, 0x6d, 0x48, 0x3f, 0x28, 0xd3, 0x49, 0x1a, 0x06, 0x68, 0x08, 0x6b, 0x5c, 0xd1,
	0xe1, 0x85, 0xd1, 0x6b, 0xd6, 0x6d, 0xf7, 0xb4, 0x9d, 0xf6, 0x6e, 0xaf, 0xaf, 0xa8, 0xeb, 0x2f,
	0xe3, 0x0d, 0xb7, 0xf9, 0xad, 0x62, 0x08, 0x58, 0xcf, 0x81, 0x98, 0x26, 0x2c, 0xe5, 0x3e, 0x4d,
	0xd0, 0x67, 0xd0, 0xf2, 0xe3, 0xd4, 0xf3, 0x59, 0x1a, 0x09, 0xc9, 0x4d, 0x0d, 0x37, 0xfd, 0x38,
	0x1d, 0xe6, 0x3a, 0x7a, 0x08, 0x6b, 0x13, 0x3a, 0x61, 0x3c, 0xf3, 0x4e, 0x33, 0x41, 0x13, 0xc9,
	0x52, 0x0d, 0xb7, 0x95, 0x6d, 0x2f, 0x37, 0xa1, 0x47, 0xb0, 0x9e, 0x08, 0xc6, 0xc9, 0x98, 0x16,
	0x98, 0x15, 0x89, 0x59, 0x2b, 0x8c, 0x12, 0x64, 0xfc, 0x59, 0x5c, 0xc6, 0x90, 0x45, 0x41, 0x28,
	0x42, 0x16, 0x25, 0xe8, 0x6b, 0x58, 0xe5, 0x94, 0x04, 0x99, 0xac, 0xb9, 0xb1, 0xfb, 0xc9, 0x9d,
	0x63, 0x28, 0x18, 0x56, 0x18, 0xf4, 0x18, 0xea, 0xaa, 0xa6, 0xec, 0x60, 0x29, 0xba, 0x00, 0xa1,
	0x2f, 0xa1, 0x16, 0x84, 0xc9, 0xb9, 0x6c, 0x65, 0x29, 0x58, 0x42, 0xd0, 0x17, 0xb0, 0x12, 0x87,
	0x81, 0xbc, 0xc9, 0xa5, 0xc8, 0x1c, 0x81, 0x9e, 0x40, 0x23, 0xa2, 0xe2, 0x17, 0xc6, 0xcf, 0xe5,
	0xb5, 0x2e, 0x05, 0x97, 0x28, 0x99, 0x99, 0xa9, 0x7b, 0xfe, 0x40, 0x66, 0x16, 0x18, 0x7f, 0xd4,
	0xa0, 0x9d, 0x9b, 0xcd, 0x37, 0x42, 0x8e, 0xe9, 0xc7, 0xb0, 0x7a, 0x49, 0x2e, 0xd2, 0x72, 0xd0,
	0x95, 0x82, 0x7e, 0x04, 0x90, 0x82, 0x27, 0xb2, 0x98, 0x16, 0x34, 0x6c, 0xcf, 0x67, 0x2d, 0xc2,
	0xfb, 0x2f, 0x72, 0x94, 0x9b, 0xc5, 0x14, 0xb7, 0x2e, 0x4b, 0x11, 0xfd, 0x00, 0x4d, 0x16, 0x53,
	0x4e, 0x04, 0xe3, 0x05, 0x2b, 0x5b, 0x8b, 0x62, 0x9d, 0x02, 0x83, 0x67, 0x68, 0xb4, 0x0b, 0x75,
	0x41, 0xf8, 0x98, 0x8a, 0x82, 0xa3, 0xcd, 0x45, 0x71, 0xae, 0x44, 0xe0, 0x02, 0x99, 0x4f, 0xba,
	0x92, 0xbc, 0x73, 0x9a, 0x15, 0xaf, 0xa0, 0xa5, 0x2c, 0xcf, 0x68, 0x66, 0x9c, 0x41, 0x6b, 0xd6,
	0x24, 0xda, 0x86, 0xfb, 0xb6, 0xb3, 0x6f, 0x7a, 0xe6, 0x4f, 0xae, 0x67, 0xd9, 0x4f, 0x1d, 0xcf,
	0x7d, 0xf5, 0xdc, 0xf4, 0x46, 0x2e, 0xb6, 0xec, 0x83, 0x4e, 0x05, 0xe9, 0xb0, 0xb9, 0xc0, 0x6d,
	0xd9, 0xae, 0x79, 0x60, 0xe2, 0x8e, 0x86, 0xb6, 0xa0, 0xbb, 0xc0, 0xff, 0xf4, 0xc8, 0x19, 0xb8,
	0x9d, 0xaa, 0x71, 0x01, 0xcd, 0xf2, 0x48, 0xef, 0x67, 0x72, 0x9e, 0x9b, 0x78, 0xe0, 0x3a, 0xd8,
	0x1b, 0x99, 0xee, 0xa2, 0x4a, 0x33, 0xff, 0x60, 0x7f, 0xbf, 0xa3, 0xa1, 0x1e, 0x6c, 0x2d, 0xf1,
	0x1f, 0x5b, 0xf6, 0xc9, 0xa8, 0x53, 0x35, 0x8e, 0xa1, 0xae, 0x88, 0x40, 0x8f, 0xe0, 0xc1, 0x9d,
	0xae, 0x06, 0xf8, 0xc0, 0x74, 0xbd, 0x81, 0x6d, 0x3b, 0xee, 0xc0, 0xb5, 0x1c, 0x7b, 0xe1, 0xd1,
	0x14, 0xe8, 0x68, 0xb0, 0x67, 0x1e, 0x75, 0x34, 0xe3, 0x46, 0x53, 0x6f, 0x75, 0x24, 0x88, 0x48,
	0x93, 0xe3, 0x64, 0x8c, 0xbe, 0x9f, 0xad, 0x08, 0xb9, 0x00, 0x34, 0xb9, 0x00, 0xee, 0xcd, 0x5f,
	0xc8, 0xed, 0xb6, 0x2b, 0x57, 0x87, 0x1c, 0xa9, 0x6f, 0xa0, 0xe9, 0x93, 0x98, 0xf8, 0xa1, 0x50,
	0x2f, 0xa8, 0xfd, 0xff, 0x81, 0x9c, 0x6d, 0x03, 0x3c, 0x83, 0xa1, 0xef, 0x00, 0xfc, 0xd9, 0x6b,
	0x95, 0x33, 0x73, 0xa7, 0xd4, 0xed, 0x5b, 0xc6, 0x73, 0x48, 0xd4, 0x87, 0x26, 0x7d, 0x23, 0x54,
	0x83, 0xb5, 0xde, 0xca, 0x4e, 0x7b, 0xf7, 0xa3, 0x05, 0x13, 0x83, 0x1b, 0x54, 0x09, 0x5f, 0x51,
	0x75, 0xc8, 0x59, 0x36, 0xb4, 0x09, 0xf7, 0x24, 0x2d, 0x43, 0xc7, 0xde, 0xb7, 0x72, 0xaa, 0xbc,
	0x13, 0xfb, 0x99, 0xed, 0xbc, 0xcc, 0x29, 0x7b, 0xdf, 0x77, 0x68, 0x0e, 0x8e, 0xdc, 0xc3, 0x57,
	0x73, 0x93, 0x30, 0x1f, 0x57, 0x7a, 0xab, 0x7b, 0x2f, 0xaf, 0xae, 0xf5, 0xca, 0xdb, 0x6b, 0xbd,
	0xf2, 0xee, 0x5a, 0xd7, 0x7e, 0x9d, 0xea, 0xda, 0x5f, 0x53, 0x5d, 0xfb, 0x7b, 0xaa, 0x6b, 0x57,
	0x53, 0x5d, 0xfb, 0x67, 0xaa, 0x6b, 0xff, 0x4e, 0xf5, 0xca, 0xbb, 0xa9, 0xae, 0xfd, 0x76, 0xa3,
	0x57, 0xae, 0x6e, 0xf4, 0xca, 0xdb, 0x1b, 0xbd, 0xf2, 0xf3, 0x43, 0xc2, 0xcf, 0x88, 0xe8, 0x07,
	0xf4, 0xf2, 0x89, 0x3a, 0xc3, 0x63, 0xf9, 0x5d, 0x15, 0xca, 0x98, 0xc5, 0xa7, 0xa7, 0x75, 0x69,
	0xf9, 0xf6, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x26, 0x43, 0xf9, 0xe5, 0xce, 0x06, 0x00, 0x00,
}

func (x NodeCondition) String() string {
	s, ok := NodeCondition_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x NodeExtInfo_ValueType) String() string {
	s, ok := NodeExtInfo_ValueType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x NodeExtInfo_Operator) String() string {
	s, ok := NodeExtInfo_Operator_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x NodeExtInfo_Target) String() string {
	s, ok := NodeExtInfo_Target_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *NodeContainerRuntimeInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeContainerRuntimeInfo)
	if !ok {
		that2, ok := that.(NodeContainerRuntimeInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	return true
}
func (this *NodeSystemInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeSystemInfo)
	if !ok {
		that2, ok := that.(NodeSystemInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Os != that1.Os {
		return false
	}
	if this.OsImage != that1.OsImage {
		return false
	}
	if this.Arch != that1.Arch {
		return false
	}
	if this.KernelVersion != that1.KernelVersion {
		return false
	}
	if this.BootId != that1.BootId {
		return false
	}
	if this.MachineId != that1.MachineId {
		return false
	}
	if this.SystemUuid != that1.SystemUuid {
		return false
	}
	if !this.RuntimeInfo.Equal(that1.RuntimeInfo) {
		return false
	}
	return true
}
func (this *NodeResources) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeResources)
	if !ok {
		that2, ok := that.(NodeResources)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CpuCount != that1.CpuCount {
		return false
	}
	if this.MemoryBytes != that1.MemoryBytes {
		return false
	}
	if this.StorageBytes != that1.StorageBytes {
		return false
	}
	return true
}
func (this *NodeConditions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeConditions)
	if !ok {
		that2, ok := that.(NodeConditions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ready != that1.Ready {
		return false
	}
	if this.Memory != that1.Memory {
		return false
	}
	if this.Disk != that1.Disk {
		return false
	}
	if this.Pid != that1.Pid {
		return false
	}
	if this.Network != that1.Network {
		return false
	}
	if this.Pod != that1.Pod {
		return false
	}
	return true
}
func (this *NodeExtInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeExtInfo)
	if !ok {
		that2, ok := that.(NodeExtInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.ValueType != that1.ValueType {
		return false
	}
	if this.Operator != that1.Operator {
		return false
	}
	if this.Target != that1.Target {
		return false
	}
	if this.TargetKey != that1.TargetKey {
		return false
	}
	return true
}
func (this *NodeStatusMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeStatusMsg)
	if !ok {
		that2, ok := that.(NodeStatusMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SystemInfo.Equal(that1.SystemInfo) {
		return false
	}
	if !this.Capacity.Equal(that1.Capacity) {
		return false
	}
	if !this.Conditions.Equal(that1.Conditions) {
		return false
	}
	if len(this.ExtInfo) != len(that1.ExtInfo) {
		return false
	}
	for i := range this.ExtInfo {
		if !this.ExtInfo[i].Equal(that1.ExtInfo[i]) {
			return false
		}
	}
	return true
}
func (this *NodeContainerRuntimeInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&aranyagopb.NodeContainerRuntimeInfo{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NodeSystemInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&aranyagopb.NodeSystemInfo{")
	s = append(s, "Os: "+fmt.Sprintf("%#v", this.Os)+",\n")
	s = append(s, "OsImage: "+fmt.Sprintf("%#v", this.OsImage)+",\n")
	s = append(s, "Arch: "+fmt.Sprintf("%#v", this.Arch)+",\n")
	s = append(s, "KernelVersion: "+fmt.Sprintf("%#v", this.KernelVersion)+",\n")
	s = append(s, "BootId: "+fmt.Sprintf("%#v", this.BootId)+",\n")
	s = append(s, "MachineId: "+fmt.Sprintf("%#v", this.MachineId)+",\n")
	s = append(s, "SystemUuid: "+fmt.Sprintf("%#v", this.SystemUuid)+",\n")
	if this.RuntimeInfo != nil {
		s = append(s, "RuntimeInfo: "+fmt.Sprintf("%#v", this.RuntimeInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NodeResources) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&aranyagopb.NodeResources{")
	s = append(s, "CpuCount: "+fmt.Sprintf("%#v", this.CpuCount)+",\n")
	s = append(s, "MemoryBytes: "+fmt.Sprintf("%#v", this.MemoryBytes)+",\n")
	s = append(s, "StorageBytes: "+fmt.Sprintf("%#v", this.StorageBytes)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NodeConditions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&aranyagopb.NodeConditions{")
	s = append(s, "Ready: "+fmt.Sprintf("%#v", this.Ready)+",\n")
	s = append(s, "Memory: "+fmt.Sprintf("%#v", this.Memory)+",\n")
	s = append(s, "Disk: "+fmt.Sprintf("%#v", this.Disk)+",\n")
	s = append(s, "Pid: "+fmt.Sprintf("%#v", this.Pid)+",\n")
	s = append(s, "Network: "+fmt.Sprintf("%#v", this.Network)+",\n")
	s = append(s, "Pod: "+fmt.Sprintf("%#v", this.Pod)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NodeExtInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&aranyagopb.NodeExtInfo{")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "ValueType: "+fmt.Sprintf("%#v", this.ValueType)+",\n")
	s = append(s, "Operator: "+fmt.Sprintf("%#v", this.Operator)+",\n")
	s = append(s, "Target: "+fmt.Sprintf("%#v", this.Target)+",\n")
	s = append(s, "TargetKey: "+fmt.Sprintf("%#v", this.TargetKey)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NodeStatusMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&aranyagopb.NodeStatusMsg{")
	if this.SystemInfo != nil {
		s = append(s, "SystemInfo: "+fmt.Sprintf("%#v", this.SystemInfo)+",\n")
	}
	if this.Capacity != nil {
		s = append(s, "Capacity: "+fmt.Sprintf("%#v", this.Capacity)+",\n")
	}
	if this.Conditions != nil {
		s = append(s, "Conditions: "+fmt.Sprintf("%#v", this.Conditions)+",\n")
	}
	if this.ExtInfo != nil {
		s = append(s, "ExtInfo: "+fmt.Sprintf("%#v", this.ExtInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringNode(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *NodeContainerRuntimeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeContainerRuntimeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeContainerRuntimeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintNode(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintNode(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodeSystemInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeSystemInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeSystemInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RuntimeInfo != nil {
		{
			size, err := m.RuntimeInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNode(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if len(m.SystemUuid) > 0 {
		i -= len(m.SystemUuid)
		copy(dAtA[i:], m.SystemUuid)
		i = encodeVarintNode(dAtA, i, uint64(len(m.SystemUuid)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.MachineId) > 0 {
		i -= len(m.MachineId)
		copy(dAtA[i:], m.MachineId)
		i = encodeVarintNode(dAtA, i, uint64(len(m.MachineId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.BootId) > 0 {
		i -= len(m.BootId)
		copy(dAtA[i:], m.BootId)
		i = encodeVarintNode(dAtA, i, uint64(len(m.BootId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.KernelVersion) > 0 {
		i -= len(m.KernelVersion)
		copy(dAtA[i:], m.KernelVersion)
		i = encodeVarintNode(dAtA, i, uint64(len(m.KernelVersion)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Arch) > 0 {
		i -= len(m.Arch)
		copy(dAtA[i:], m.Arch)
		i = encodeVarintNode(dAtA, i, uint64(len(m.Arch)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OsImage) > 0 {
		i -= len(m.OsImage)
		copy(dAtA[i:], m.OsImage)
		i = encodeVarintNode(dAtA, i, uint64(len(m.OsImage)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Os) > 0 {
		i -= len(m.Os)
		copy(dAtA[i:], m.Os)
		i = encodeVarintNode(dAtA, i, uint64(len(m.Os)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodeResources) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeResources) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeResources) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StorageBytes != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.StorageBytes))
		i--
		dAtA[i] = 0x18
	}
	if m.MemoryBytes != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.MemoryBytes))
		i--
		dAtA[i] = 0x10
	}
	if m.CpuCount != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.CpuCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NodeConditions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeConditions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeConditions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pod != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.Pod))
		i--
		dAtA[i] = 0x30
	}
	if m.Network != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.Network))
		i--
		dAtA[i] = 0x28
	}
	if m.Pid != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.Pid))
		i--
		dAtA[i] = 0x20
	}
	if m.Disk != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.Disk))
		i--
		dAtA[i] = 0x18
	}
	if m.Memory != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.Memory))
		i--
		dAtA[i] = 0x10
	}
	if m.Ready != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.Ready))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NodeExtInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeExtInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeExtInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TargetKey) > 0 {
		i -= len(m.TargetKey)
		copy(dAtA[i:], m.TargetKey)
		i = encodeVarintNode(dAtA, i, uint64(len(m.TargetKey)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Target != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.Target))
		i--
		dAtA[i] = 0x20
	}
	if m.Operator != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.Operator))
		i--
		dAtA[i] = 0x18
	}
	if m.ValueType != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.ValueType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintNode(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodeStatusMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeStatusMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeStatusMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExtInfo) > 0 {
		for iNdEx := len(m.ExtInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExtInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNode(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Conditions != nil {
		{
			size, err := m.Conditions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNode(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Capacity != nil {
		{
			size, err := m.Capacity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNode(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.SystemInfo != nil {
		{
			size, err := m.SystemInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNode(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintNode(dAtA []byte, offset int, v uint64) int {
	offset -= sovNode(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NodeContainerRuntimeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	return n
}

func (m *NodeSystemInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Os)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	l = len(m.OsImage)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	l = len(m.Arch)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	l = len(m.KernelVersion)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	l = len(m.BootId)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	l = len(m.MachineId)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	l = len(m.SystemUuid)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	if m.RuntimeInfo != nil {
		l = m.RuntimeInfo.Size()
		n += 1 + l + sovNode(uint64(l))
	}
	return n
}

func (m *NodeResources) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CpuCount != 0 {
		n += 1 + sovNode(uint64(m.CpuCount))
	}
	if m.MemoryBytes != 0 {
		n += 1 + sovNode(uint64(m.MemoryBytes))
	}
	if m.StorageBytes != 0 {
		n += 1 + sovNode(uint64(m.StorageBytes))
	}
	return n
}

func (m *NodeConditions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ready != 0 {
		n += 1 + sovNode(uint64(m.Ready))
	}
	if m.Memory != 0 {
		n += 1 + sovNode(uint64(m.Memory))
	}
	if m.Disk != 0 {
		n += 1 + sovNode(uint64(m.Disk))
	}
	if m.Pid != 0 {
		n += 1 + sovNode(uint64(m.Pid))
	}
	if m.Network != 0 {
		n += 1 + sovNode(uint64(m.Network))
	}
	if m.Pod != 0 {
		n += 1 + sovNode(uint64(m.Pod))
	}
	return n
}

func (m *NodeExtInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	if m.ValueType != 0 {
		n += 1 + sovNode(uint64(m.ValueType))
	}
	if m.Operator != 0 {
		n += 1 + sovNode(uint64(m.Operator))
	}
	if m.Target != 0 {
		n += 1 + sovNode(uint64(m.Target))
	}
	l = len(m.TargetKey)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	return n
}

func (m *NodeStatusMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SystemInfo != nil {
		l = m.SystemInfo.Size()
		n += 1 + l + sovNode(uint64(l))
	}
	if m.Capacity != nil {
		l = m.Capacity.Size()
		n += 1 + l + sovNode(uint64(l))
	}
	if m.Conditions != nil {
		l = m.Conditions.Size()
		n += 1 + l + sovNode(uint64(l))
	}
	if len(m.ExtInfo) > 0 {
		for _, e := range m.ExtInfo {
			l = e.Size()
			n += 1 + l + sovNode(uint64(l))
		}
	}
	return n
}

func sovNode(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNode(x uint64) (n int) {
	return sovNode(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *NodeContainerRuntimeInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeContainerRuntimeInfo{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeSystemInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeSystemInfo{`,
		`Os:` + fmt.Sprintf("%v", this.Os) + `,`,
		`OsImage:` + fmt.Sprintf("%v", this.OsImage) + `,`,
		`Arch:` + fmt.Sprintf("%v", this.Arch) + `,`,
		`KernelVersion:` + fmt.Sprintf("%v", this.KernelVersion) + `,`,
		`BootId:` + fmt.Sprintf("%v", this.BootId) + `,`,
		`MachineId:` + fmt.Sprintf("%v", this.MachineId) + `,`,
		`SystemUuid:` + fmt.Sprintf("%v", this.SystemUuid) + `,`,
		`RuntimeInfo:` + strings.Replace(this.RuntimeInfo.String(), "NodeContainerRuntimeInfo", "NodeContainerRuntimeInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeResources) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeResources{`,
		`CpuCount:` + fmt.Sprintf("%v", this.CpuCount) + `,`,
		`MemoryBytes:` + fmt.Sprintf("%v", this.MemoryBytes) + `,`,
		`StorageBytes:` + fmt.Sprintf("%v", this.StorageBytes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeConditions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeConditions{`,
		`Ready:` + fmt.Sprintf("%v", this.Ready) + `,`,
		`Memory:` + fmt.Sprintf("%v", this.Memory) + `,`,
		`Disk:` + fmt.Sprintf("%v", this.Disk) + `,`,
		`Pid:` + fmt.Sprintf("%v", this.Pid) + `,`,
		`Network:` + fmt.Sprintf("%v", this.Network) + `,`,
		`Pod:` + fmt.Sprintf("%v", this.Pod) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeExtInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeExtInfo{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`ValueType:` + fmt.Sprintf("%v", this.ValueType) + `,`,
		`Operator:` + fmt.Sprintf("%v", this.Operator) + `,`,
		`Target:` + fmt.Sprintf("%v", this.Target) + `,`,
		`TargetKey:` + fmt.Sprintf("%v", this.TargetKey) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeStatusMsg) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForExtInfo := "[]*NodeExtInfo{"
	for _, f := range this.ExtInfo {
		repeatedStringForExtInfo += strings.Replace(f.String(), "NodeExtInfo", "NodeExtInfo", 1) + ","
	}
	repeatedStringForExtInfo += "}"
	s := strings.Join([]string{`&NodeStatusMsg{`,
		`SystemInfo:` + strings.Replace(this.SystemInfo.String(), "NodeSystemInfo", "NodeSystemInfo", 1) + `,`,
		`Capacity:` + strings.Replace(this.Capacity.String(), "NodeResources", "NodeResources", 1) + `,`,
		`Conditions:` + strings.Replace(this.Conditions.String(), "NodeConditions", "NodeConditions", 1) + `,`,
		`ExtInfo:` + repeatedStringForExtInfo + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringNode(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *NodeContainerRuntimeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeContainerRuntimeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeContainerRuntimeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeSystemInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeSystemInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeSystemInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Os", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Os = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OsImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arch = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KernelVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KernelVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BootId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BootId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MachineId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MachineId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuntimeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RuntimeInfo == nil {
				m.RuntimeInfo = &NodeContainerRuntimeInfo{}
			}
			if err := m.RuntimeInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeResources) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeResources: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeResources: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuCount", wireType)
			}
			m.CpuCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CpuCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoryBytes", wireType)
			}
			m.MemoryBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemoryBytes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageBytes", wireType)
			}
			m.StorageBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StorageBytes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeConditions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeConditions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeConditions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ready", wireType)
			}
			m.Ready = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ready |= NodeCondition(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memory", wireType)
			}
			m.Memory = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Memory |= NodeCondition(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disk", wireType)
			}
			m.Disk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Disk |= NodeCondition(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			m.Pid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pid |= NodeCondition(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			m.Network = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Network |= NodeCondition(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pod", wireType)
			}
			m.Pod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pod |= NodeCondition(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeExtInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeExtInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeExtInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueType", wireType)
			}
			m.ValueType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValueType |= NodeExtInfo_ValueType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			m.Operator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Operator |= NodeExtInfo_Operator(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			m.Target = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Target |= NodeExtInfo_Target(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeStatusMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeStatusMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeStatusMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SystemInfo == nil {
				m.SystemInfo = &NodeSystemInfo{}
			}
			if err := m.SystemInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capacity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Capacity == nil {
				m.Capacity = &NodeResources{}
			}
			if err := m.Capacity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Conditions == nil {
				m.Conditions = &NodeConditions{}
			}
			if err := m.Conditions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtInfo = append(m.ExtInfo, &NodeExtInfo{})
			if err := m.ExtInfo[len(m.ExtInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNode(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNode
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNode
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNode
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNode
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNode        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNode          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNode = fmt.Errorf("proto: unexpected end of group")
)
