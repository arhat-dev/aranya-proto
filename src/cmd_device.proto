/*
Copyright 2020 The arhat.dev Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

// +build !nodev
package aranya;

option go_package = "arhat.dev/aranya-proto/aranyagopb";

import "device.proto";
import "connectivity.proto";

message DeviceOperation {
    // (required) identifier of this operation
    string operation_id = 1;

    // (optional) params usd for device connectivity when executing this
    // operation
    map<string, string> params = 2;
}

message DeviceMetric {
    enum ReportMethod {
        // Report device metrics when collecting node metrics
        REPORT_WITH_NODE_METRICS = 0;
        // Report device metrics along with arhat client
        REPORT_WITH_ARHAT_CONNECTIVITY = 1;
        // Create a standalone client for metrics uploading
        REPORT_WITH_STANDALONE_CLIENT = 2;
    }

    enum ValueType {
        METRICS_VALUE_TYPE_UNTYPED = 0;
        METRICS_VALUE_TYPE_COUNTER = 1;
        METRICS_VALUE_TYPE_GAUGE = 2;
    }

    // Name of this metric
    string name = 1;

    ReportMethod report_method = 2;

    ValueType value_type = 3;

    // (required) params for device connector to retrieve metrics
    map<string, string> device_params = 4;

    // Hex encoded hash of the metrics reporter
    string reporter_hash_hex = 5;

    // (optional) params for metrics_reporter to upload metrics
    map<string, string> reporter_params = 6;
}

message DeviceEnsureCmd {
    DeviceType kind = 1;

    // (required) Hex encoded hash of the connector of this device
    string connector_hash_hex = 2;

    // (required) Connector defines how to connect to the device, operations operate
    // upon this connector
    Connectivity connector = 3;

    // (optional) identifier of this normal devices, used to find this device in aranya
    string device_id = 4;

    // (optional) User defined device operations
    repeated DeviceOperation operations = 5;

    // (optional) User defined device metrics
    repeated DeviceMetric metrics = 6;
}

message DeviceListCmd {
    DeviceType kind = 1;
}

message DeviceDeleteCmd {
    // delete normal devices
    repeated string device_ids = 1;

    // delete metrics reporters
    repeated string metrics_reporter_hash_hexes = 2;
}

message DeviceOperateCmd {
    // (required) device id of a normal device
    string device_id = 1;

    // (required) identifier of this operation
    string operation_id = 2;

    // (optional) extra data for this operation
    bytes data = 3;
}

message DeviceMetricsCollectCmd {
    bool all = 1;

    repeated string device_ids = 2;
}
