/*
Copyright 2020 The arhat.dev Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package aranya;

option go_package = "arhat.dev/aranya-proto/aranyagopb";

message Empty {}

enum CmdType {
    // 0-4: raw data related cmd
    CMD_DATA_UPSTREAM = 0;

    CMD_SESSION_CLOSE = 5;
    CMD_REJECT = 6;

    // network operations, protobuf bytes of abbot proto
    CMD_NET = 9;

    // runtime operations, protobuf bytes of runtime.Packet
    CMD_RUNTIME = 10;

    // 11-19: node operations
    CMD_NODE_INFO_GET = 11;
    CMD_EXEC = 12;
    CMD_ATTACH = 13;
    CMD_LOGS = 14;
    CMD_TTY_RESIZE = 15;
    CMD_PORT_FORWARD = 16;

    // 21-29: metrics operations
    CMD_METRICS_CONFIG = 21;
    CMD_METRICS_COLLECT = 22;

    // 31-39: credentials operations
    CMD_CRED_ENSURE = 31;

    // 51-59: storage operations (remote csi)
    CMD_STORAGE_LIST = 41;
    CMD_STORAGE_ENSURE = 42;
    CMD_STORAGE_DELETE = 43;

    // 71-79: peripheral operations
    CMD_PERIPHERAL_LIST = 51;
    CMD_PERIPHERAL_ENSURE = 52;
    CMD_PERIPHERAL_DELETE = 53;
    CMD_PERIPHERAL_OPERATE = 54;
    CMD_PERIPHERAL_COLLECT_METRICS = 55;
}

message Cmd {
    CmdType kind = 1;

    // session id
    uint64 sid = 2;

    // sequence in the session, to ensure ordered data
    uint64 seq = 3;

    // mark this Cmd is the last piece in the session
    bool completed = 4;

    // body of encoded XxxCmd or raw data bytes
    bytes body = 11;
}

enum MsgType {
    option allow_alias = true;

    MSG_DATA = 0;
    MSG_DATA_DEFAULT = 0;
    MSG_DATA_STDOUT = 0;
    MSG_DATA_METRICS = 0;

    MSG_DATA_STDERR = 1;

    MSG_DONE = 5;
    MSG_STATE = 6;
    MSG_ERROR = 7;

    // network msgs, protobuf bytes of abbot proto
    MSG_NET = 9;

    // runtime messages, protobuf bytes of runtime.Packet
    MSG_RUNTIME = 10;

    // 11-19: node msgs
    MSG_NODE_STATUS = 11;

    // 21-22: metrics msgs

    // 31-39: credential msgs
    MSG_CRED_STATUS = 31;

    // 51-59: storage msgs
    MSG_STORAGE_STATUS = 41;
    MSG_STORAGE_STATUS_LIST = 42;

    // 71-79: peripheral msgs
    MSG_PERIPHERAL_STATUS = 51;
    MSG_PERIPHERAL_STATUS_LIST = 52;
    MSG_PERIPHERAL_OPERATION_RESULT = 53;
}

message Msg {
    MsgType kind = 1;

    // session id
    uint64 sid = 2;

    // sequence in the session, to ensure ordered data
    uint64 seq = 3;

    // mark this Msg is the last piece in the session
    bool completed = 4;

    // body of encoded XxxMsg or raw data bytes
    bytes body = 11;
}

// required Cmds and Msgs

message NodeInfoGetCmd {
    enum Kind {
        NODE_INFO_DYN = 0;
        NODE_INFO_ALL = 1;
    }

    Kind kind = 1;
}

message SessionCloseCmd {
    uint64 sid = 1;
}

enum RejectionReason {
    _INVALID_REJECTION_REASON = 0;
    REJECTION_INVALID_PROTO = 1;
    REJECTION_ALREADY_CONNECTED = 2;
    REJECTION_INITIAL_CHECK_FAILURE = 3;
    REJECTION_INTERNAL_SERVER_ERROR = 4;
}

message RejectCmd {
    RejectionReason reason = 1;
    string message = 2;
}

message NetworkCmd {
    // protobuf bytes of abbot proto
    bytes abbot_request_bytes = 1;
}

message LogsCmd {
    string pod_uid = 1;
    string container = 2;

    bool follow = 3;
    bool timestamp = 4;

    string since = 5; // rfc3339 time
    int64 tail_lines = 6;
    int64 bytes_limit = 7;

    bool previous = 8;

    // host log path
    string path = 9;
}

// Exec/Attach Cmd
message ExecOrAttachCmd {
    string pod_uid = 1;
    string container = 2;

    bool stdin = 3;
    bool stdout = 4;
    bool stderr = 5;
    bool tty = 6;

    // command is empty when used for container attach
    repeated string command = 7;

    // environment variables when used with virtual host container image
    // values are resolved by aranya
    map<string, string> envs = 8;
}

message PortForwardCmd {
    string pod_uid = 1;

    int32 port = 2;
    string protocol = 3;
}

message TerminalResizeCmd {
    uint32 cols = 1;
    uint32 rows = 2;
}

// Error infomation
message ErrorMsg {
    enum Kind {
        // ERR_COMMON means Error happened, but we don't know what to do,
        // report as failure and retry later.
        ERR_COMMON = 0;

        // ERR_NOT_FOUND means something not found but may be expected by
        // the scheduler, aranya should schedule according task or ignore.
        ERR_NOT_FOUND = 1;

        // ERR_ALREADY_EXISTS means something expected by the scheduler already
        // exists in agent, agent only report this error when it's sure the
        // existing object is the same with the one expected by the scheduler,
        // otherwise it should report ERR_NOT_FOUND.
        ERR_ALREADY_EXISTS = 2;

        // ERR_NOT_SUPPORTED means Cmd not supported by the agent,
        // aranya should ignore this error and cancel all future
        // job.
        ERR_NOT_SUPPORTED = 3;

        // ERR_TIMEOUT only happens in connectivity server,
        // right after the session is timed out
        ERR_TIMEOUT = 4;
    }

    Kind kind = 1;

    // Human readable error description
    string description = 2;

    // error code may be used for:
    //  - exit code of command execution
    //  - ...TBD
    int64 code = 3;
}

// State of agent, online/offline
message StateMsg {
    enum Kind {
        _INVALID_STATE = 0;

        STATE_ONLINE = 1;
        STATE_OFFLINE = 2;
    }

    Kind kind = 1;
    string device_id = 2;
}

message NetworkMsg {
    // protobuf bytes of abbot proto
    bytes abbot_response_bytes = 1;
}
