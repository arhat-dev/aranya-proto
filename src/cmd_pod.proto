/*
Copyright 2020 The arhat.dev Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

// +build !rt_none
package aranya;

option go_package = "arhat.dev/aranya-proto/aranyagopb";

message NamedData {
    map<string, bytes> data_map = 1;
}

message SELinuxOptions {
    string type = 1;
    string level = 2;
    string role = 3;
    string user = 4;
}

message ContainerSecuritySpec {
    enum ProcMountKind {
        PROC_MOUNT_DEFAULT = 0;
        PROC_MOUNT_UNMASKED = 1;
    }

    bool privileged = 1;
    bool allow_new_privileges = 2;
    bool non_root = 3;
    bool read_only_rootfs = 4;

    int64 user = 5;
    int64 group = 6;

    repeated string caps_add = 7;
    repeated string caps_drop = 8;

    ProcMountKind proc_mount_kind = 9;

    SELinuxOptions selinux_options = 10;
}

message ContainerMountSpec {
    string mount_path = 1;
    string sub_path = 2;
    bool read_only = 3;
    // device type
    string type = 4;
    repeated string options = 5;
    uint32 file_mode = 6;

    // mount this volume use cluster CSI
    bool remote = 7;
}

message KeyValuePair {
    string key = 1;
    string value = 2;
}

message ContainerAction {
    message Exec {
        repeated string command = 1;
    }

    message HTTP {
        string method = 1;
        string url = 2;
        repeated KeyValuePair headers = 3;
    }

    message Socket {
        string address = 1;
    }

    oneof action {
        Exec exec = 1;
        HTTP http = 2;
        Socket socket = 3;
    };
}

message ContainerProbeSpec {
    int64 initial_delay = 1;
    int64 probe_timeout = 2;
    int64 probe_interval = 3;

    int32 success_threshold = 4;
    int32 failure_threshold = 5;

    ContainerAction method = 6;
}

message ContainerSpec {
    string name = 1;

    // container image name to pull
    string image = 2;

    string working_dir = 3;

    bool stdin = 4;
    bool stdin_once = 5;
    bool tty = 6;

    // Command (ENTRYPOINT in Dockerfile)
    repeated string command = 7;
    // Args (CMD in Dockerfile)
    repeated string args = 8;

    // Contaienr environment variables
    //
    // key: env key
    // value: env value
    map<string, string> envs = 9;

    // Container voulme or device mounts
    //
    // key: volume or device name
    // value: mount options
    map<string, ContainerMountSpec> mounts = 10;

    ContainerProbeSpec readiness_check = 11;
    ContainerProbeSpec liveness_check = 12;

    //
    // resolved security opts in pod
    //
    ContainerSecuritySpec security = 13;

    //
    // Container hooks
    //
    ContainerAction hook_post_start = 14;
}

enum RestartPolicy {
    RESTART_ALWAYS = 0;
    RESTART_ON_FAILURE = 1;
    RESTART_NEVER = 2;
}

message PodVolumeSpec {
    //
    // Volumes and devices (in early days, they are the same)
    //

    // Volumes and devices' host path
    //
    // key: volume or device name
    // value: host path
    map<string, string> host_paths = 21;

    // Data to populate files in container
    //
    // key: volume name
    // value: data from {ConfigMap, Secret}
    map<string, NamedData> volume_data = 22;
}

message PodSecuritySpec {
    // key:
    // value:
    map<string, string> sysctls = 15;
}

message PodNetworkSpec {
    repeated string nameservers = 1;
    repeated string dns_searches = 2;
    repeated string dns_options = 3;

    // key: ip
    // value: space separated domain names (e.g. `example.com example.org`)
    map<string, string> hosts = 4;

    // protobuf bytes of abbot proto
    bytes abbot_request_bytes = 11;
}

message PodEnsureCmd {
    // kubernetes metadata
    string pod_uid = 1;
    string namespace = 2;
    string name = 3;

    RestartPolicy restart_policy = 4;

    //
    // Relationships to host namespaces
    //
    bool host_ipc = 5;
    bool host_network = 6;
    bool host_pid = 7;
    // share pid namespace between containers in the same pod
    bool share_pid = 8;

    // wait unitl all containers defined in this cmd exited with no error
    bool wait = 9;

    // custom hostname to override pod name as hostname
    string hostname = 10;

    repeated ContainerSpec containers = 11;
    PodNetworkSpec network = 12;
    PodVolumeSpec volumes = 13;
    PodSecuritySpec security = 14;

    map<string, string> labels = 15;
}

message PodDeleteCmd {
    // pod to perform delete operation
    string pod_uid = 1;

    // containers to delete, if not specified, delete this pod
    repeated string containers = 2;

    // pod deletion grace time
    int64 grace_time = 10;

    // key: container name
    // value:
    map<string, ContainerAction> hook_pre_stop = 11;
}

message PodListCmd {
    // show all pods available
    bool all = 1;

    // pod names filter
    repeated string names = 2;
}
