/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.2 */

#ifndef PB_ARANYA_MSG_METRICS_PB_H_INCLUDED
#define PB_ARANYA_MSG_METRICS_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _aranya_Metrics_Kind {
    aranya_Metrics_Kind__INVALID_METRICS_KIND = 0,
    aranya_Metrics_Kind_METRICS_NODE = 1,
    aranya_Metrics_Kind_METRICS_CONTAINER = 2,
    aranya_Metrics_Kind_METRICS_COLLECTION_CONFIGURED = 3
} aranya_Metrics_Kind;

/* Struct definitions */
typedef struct _aranya_Metrics {
    aranya_Metrics_Kind kind;
    pb_callback_t data;
} aranya_Metrics;


/* Helper constants for enums */
#define _aranya_Metrics_Kind_MIN aranya_Metrics_Kind__INVALID_METRICS_KIND
#define _aranya_Metrics_Kind_MAX aranya_Metrics_Kind_METRICS_COLLECTION_CONFIGURED
#define _aranya_Metrics_Kind_ARRAYSIZE ((aranya_Metrics_Kind)(aranya_Metrics_Kind_METRICS_COLLECTION_CONFIGURED+1))


/* Initializer values for message structs */
#define aranya_Metrics_init_default              {_aranya_Metrics_Kind_MIN, {{NULL}, NULL}}
#define aranya_Metrics_init_zero                 {_aranya_Metrics_Kind_MIN, {{NULL}, NULL}}

/* Field tags (for use in manual encoding/decoding) */
#define aranya_Metrics_kind_tag                  1
#define aranya_Metrics_data_tag                  2

/* Struct field encoding specification for nanopb */
#define aranya_Metrics_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    kind,              1) \
X(a, CALLBACK, SINGULAR, BYTES,    data,              2)
#define aranya_Metrics_CALLBACK pb_default_field_callback
#define aranya_Metrics_DEFAULT NULL

extern const pb_msgdesc_t aranya_Metrics_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define aranya_Metrics_fields &aranya_Metrics_msg

/* Maximum encoded size of messages (where known) */
/* aranya_Metrics_size depends on runtime parameters */

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
