/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.2 */

#ifndef PB_ARANYA_MSG_DATA_PB_H_INCLUDED
#define PB_ARANYA_MSG_DATA_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _aranya_Data_Kind {
    aranya_Data_Kind_DATA_OTHER = 0,
    aranya_Data_Kind_DATA_STDOUT = 1,
    aranya_Data_Kind_DATA_STDERR = 2,
    aranya_Data_Kind_DATA_ERROR = 3
} aranya_Data_Kind;

/* Struct definitions */
typedef struct _aranya_Data {
    aranya_Data_Kind kind;
    pb_callback_t data;
    uint64_t seq;
} aranya_Data;


/* Helper constants for enums */
#define _aranya_Data_Kind_MIN aranya_Data_Kind_DATA_OTHER
#define _aranya_Data_Kind_MAX aranya_Data_Kind_DATA_ERROR
#define _aranya_Data_Kind_ARRAYSIZE ((aranya_Data_Kind)(aranya_Data_Kind_DATA_ERROR+1))


/* Initializer values for message structs */
#define aranya_Data_init_default                 {_aranya_Data_Kind_MIN, {{NULL}, NULL}, 0}
#define aranya_Data_init_zero                    {_aranya_Data_Kind_MIN, {{NULL}, NULL}, 0}

/* Field tags (for use in manual encoding/decoding) */
#define aranya_Data_kind_tag                     1
#define aranya_Data_data_tag                     2
#define aranya_Data_seq_tag                      3

/* Struct field encoding specification for nanopb */
#define aranya_Data_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    kind,              1) \
X(a, CALLBACK, SINGULAR, BYTES,    data,              2) \
X(a, STATIC,   SINGULAR, UINT64,   seq,               3)
#define aranya_Data_CALLBACK pb_default_field_callback
#define aranya_Data_DEFAULT NULL

extern const pb_msgdesc_t aranya_Data_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define aranya_Data_fields &aranya_Data_msg

/* Maximum encoded size of messages (where known) */
/* aranya_Data_size depends on runtime parameters */

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
