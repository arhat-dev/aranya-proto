/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.2 */

#ifndef PB_ARANYA_CMD_SESSION_PB_H_INCLUDED
#define PB_ARANYA_CMD_SESSION_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _aranya_SessionCmd_Action {
    aranya_SessionCmd_Action__INVALID_SESSION_ACTION = 0,
    aranya_SessionCmd_Action_CLOSE_SESSION = 1
} aranya_SessionCmd_Action;

/* Struct definitions */
typedef struct _aranya_SessionCmd {
    aranya_SessionCmd_Action action;
    pb_size_t which_options;
    union {
        uint64_t session_id;
    } options;
} aranya_SessionCmd;


/* Helper constants for enums */
#define _aranya_SessionCmd_Action_MIN aranya_SessionCmd_Action__INVALID_SESSION_ACTION
#define _aranya_SessionCmd_Action_MAX aranya_SessionCmd_Action_CLOSE_SESSION
#define _aranya_SessionCmd_Action_ARRAYSIZE ((aranya_SessionCmd_Action)(aranya_SessionCmd_Action_CLOSE_SESSION+1))


/* Initializer values for message structs */
#define aranya_SessionCmd_init_default           {_aranya_SessionCmd_Action_MIN, 0, {0}}
#define aranya_SessionCmd_init_zero              {_aranya_SessionCmd_Action_MIN, 0, {0}}

/* Field tags (for use in manual encoding/decoding) */
#define aranya_SessionCmd_action_tag             1
#define aranya_SessionCmd_session_id_tag         2

/* Struct field encoding specification for nanopb */
#define aranya_SessionCmd_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    action,            1) \
X(a, STATIC,   ONEOF,    UINT64,   (options,session_id,options.session_id),   2)
#define aranya_SessionCmd_CALLBACK NULL
#define aranya_SessionCmd_DEFAULT NULL

extern const pb_msgdesc_t aranya_SessionCmd_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define aranya_SessionCmd_fields &aranya_SessionCmd_msg

/* Maximum encoded size of messages (where known) */
#define aranya_SessionCmd_size                   13

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
