/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.2 */

#ifndef PB_ARANYA_MSG_ERROR_PB_H_INCLUDED
#define PB_ARANYA_MSG_ERROR_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _aranya_Error_Kind {
    aranya_Error_Kind_ERR_COMMON = 0,
    aranya_Error_Kind_ERR_NOT_FOUND = 1,
    aranya_Error_Kind_ERR_ALREADY_EXISTS = 2,
    aranya_Error_Kind_ERR_NOT_SUPPORTED = 3,
    aranya_Error_Kind_ERR_TIMEOUT = 4
} aranya_Error_Kind;

/* Struct definitions */
typedef struct _aranya_Error {
    aranya_Error_Kind kind;
    pb_callback_t description;
    int64_t code;
} aranya_Error;


/* Helper constants for enums */
#define _aranya_Error_Kind_MIN aranya_Error_Kind_ERR_COMMON
#define _aranya_Error_Kind_MAX aranya_Error_Kind_ERR_TIMEOUT
#define _aranya_Error_Kind_ARRAYSIZE ((aranya_Error_Kind)(aranya_Error_Kind_ERR_TIMEOUT+1))


/* Initializer values for message structs */
#define aranya_Error_init_default                {_aranya_Error_Kind_MIN, {{NULL}, NULL}, 0}
#define aranya_Error_init_zero                   {_aranya_Error_Kind_MIN, {{NULL}, NULL}, 0}

/* Field tags (for use in manual encoding/decoding) */
#define aranya_Error_kind_tag                    1
#define aranya_Error_description_tag             2
#define aranya_Error_code_tag                    3

/* Struct field encoding specification for nanopb */
#define aranya_Error_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    kind,              1) \
X(a, CALLBACK, SINGULAR, STRING,   description,       2) \
X(a, STATIC,   SINGULAR, INT64,    code,              3)
#define aranya_Error_CALLBACK pb_default_field_callback
#define aranya_Error_DEFAULT NULL

extern const pb_msgdesc_t aranya_Error_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define aranya_Error_fields &aranya_Error_msg

/* Maximum encoded size of messages (where known) */
/* aranya_Error_size depends on runtime parameters */

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
