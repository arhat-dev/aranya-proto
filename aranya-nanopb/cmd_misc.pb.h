/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.2 */

#ifndef PB_ARANYA_CMD_MISC_PB_H_INCLUDED
#define PB_ARANYA_CMD_MISC_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Struct definitions */
typedef struct _aranya_KeyValuePair {
    pb_callback_t key;
    pb_callback_t value;
} aranya_KeyValuePair;

typedef struct _aranya_SyncOptions {
    int64_t interval;
} aranya_SyncOptions;


/* Initializer values for message structs */
#define aranya_SyncOptions_init_default          {0}
#define aranya_KeyValuePair_init_default         {{{NULL}, NULL}, {{NULL}, NULL}}
#define aranya_SyncOptions_init_zero             {0}
#define aranya_KeyValuePair_init_zero            {{{NULL}, NULL}, {{NULL}, NULL}}

/* Field tags (for use in manual encoding/decoding) */
#define aranya_KeyValuePair_key_tag              1
#define aranya_KeyValuePair_value_tag            2
#define aranya_SyncOptions_interval_tag          1

/* Struct field encoding specification for nanopb */
#define aranya_SyncOptions_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT64,    interval,          1)
#define aranya_SyncOptions_CALLBACK NULL
#define aranya_SyncOptions_DEFAULT NULL

#define aranya_KeyValuePair_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   key,               1) \
X(a, CALLBACK, SINGULAR, STRING,   value,             2)
#define aranya_KeyValuePair_CALLBACK pb_default_field_callback
#define aranya_KeyValuePair_DEFAULT NULL

extern const pb_msgdesc_t aranya_SyncOptions_msg;
extern const pb_msgdesc_t aranya_KeyValuePair_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define aranya_SyncOptions_fields &aranya_SyncOptions_msg
#define aranya_KeyValuePair_fields &aranya_KeyValuePair_msg

/* Maximum encoded size of messages (where known) */
#define aranya_SyncOptions_size                  11
/* aranya_KeyValuePair_size depends on runtime parameters */

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
